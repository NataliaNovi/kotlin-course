package ru.stimmax.lessons.lesson12.homeworks

fun main() {
//Реши задачи подходящим методом для работы с коллекцией. Для каждой задачи есть свой метод, не повторяйся. Список методов в рекомендациях под заданиями.
    // Методы для приведения коллекции к значению:
    //isNotEmpty
    //getOrElse
    //joinToString
    //firstOrNull
    //size
    //isEmpty
    //minOrNull
    //contains
    //sum
    //average
    //maxOrNull

//Задачи на приведение коллекции к значению

    val numbers = listOf(1, 5, 10, 15, 20, 25)

//1.Проверить, что размер коллекции больше 5 элементов.
    val task1 = numbers.size > 5
    println("1. Размер больше 5: $task1")

//2.Проверить, что коллекция пустая
    val task2 = numbers.isEmpty()
    println("2. Коллекция пустая: $task2")

//3.Проверить, что коллекция не пустая
    val task3 = numbers.isNotEmpty()
    println("3. Коллекция не пустая: $task3")

//4.Взять элемент по индексу или создать значение если индекса не существует
    val elementOrElse = numbers.getOrElse(80) { -1 }
    println("4. Элемент по индексу или значение: $elementOrElse")

//5.Собрать коллекцию в строку
    val numbersString = numbers.joinToString(separator = " / ")
    println("5. Коллекция в строку: $numbersString")

//6.Посчитать сумму всех значений
    val sumOfNumbers = numbers.sum()
    println("6. Сумма: $sumOfNumbers")

//7.Посчитать среднее
    val averageOfNumbers = numbers.average()
    println("7. Среднее: $averageOfNumbers")

//8.Взять максимальное число
    val maxNumber = numbers.maxOrNull()
    println("8. Максимальное число: $maxNumber")

//9.Взять минимальное число
    val minNumber = numbers.minOrNull()
    println("9. Минимальное число: $minNumber")

//10.Взять первое число или null
    val firstPositive = numbers.firstOrNull()
    println("10. Первое число или null: $firstPositive")

//11.Проверить что коллекция содержит элемент
    println("11. Содержит 7: ${numbers.contains(7)}")

//Реши задачи подходящим методом для работы с коллекцией. Для каждой задачи есть свой метод, не повторяйся. Список методов в рекомендациях под заданиями.
//
    //Методы для обработки данных в коллекции
    //sorted
    //groupBy
    //distinct
    //take
    //takeLast
    //filter
    //filterNot
    //map
    //associate
    //sortedDescending
    //forEach
    //filterNotNull

//Задачи на обработку коллекций
    val texts: List<String?> = listOf("кот", null, "собака", "тигр", null, "сова")
    val texts1: List<String> = listOf("кот", "собака", "тигр", "сова")

//12.Отфильтровать коллекцию по диапазону 18-30
    val filtered = numbers.filter {
        it in 18..30
    }
    println("12. Диапазон 18-30: $filtered")

//13.Выбрать числа, которые не делятся на 2 и 3 одновременно
    val numberFilter = numbers.filterNot { it % 2 == 0 && it % 3 == 0 }
    println("13. Не делятся на 2 и 3: $numberFilter")

//14.Очистить текстовую коллекцию от null элементов
    val textsNullList = texts.filterNotNull()
    println("14. Без null: $textsNullList")

//15.Преобразовать текстовую коллекцию в коллекцию длин слов
    val textsLength = texts1.map { it.length }
    println("15. Длины слов: $textsLength")

//16.Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    val textReversed = texts1.associate { it.reversed() to it.length }
    println("16. В мапу: $textReversed")

//17.Отсортировать список в алфавитном порядке
    val sortedNumbers = numbers.sorted()
    println("17. Список в алфавитном порадке: $sortedNumbers")

//18.Взять первые 3 элемента списка
    val firstNumber = numbers.take(3)
    println("18. Первые 3 элемента списка: $firstNumber")

//19.Распечатать квадраты элементов списка
    print("19. Квадраты: ")
    numbers.forEach { print("${it * it} ") }
    println()

//20.Группировать список по первой букве слов
    val groupedBySign = texts1.groupBy { it.first() }
    println("20. Группировать по: $groupedBySign")

//21.Очистить список от дублей
    val distinctNumbers = listOf(1, 2, 2, 3, 3, 3, 4).distinct()
    println("21. Без дублей: $distinctNumbers")

//22.Отсортировать список по убыванию
    val sortedDescendingNumbers = numbers.sortedDescending()
    println("22. Список по убыванию: $sortedDescendingNumbers")

//23.Взять последние 3 элемента списка
    val lastNumber = numbers.takeLast(3)
    println("23. Последние 3 элемента списка: $lastNumber")

//26.
    val list = listOf(
        "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра",
        "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка",
        "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка",
        "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка",
        "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы",
        "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда",
        "Настольная лампа", "торшер", "Этажерка"
    )

    val catalog = createCatalog(list)

    // Вывод результата
    catalog.forEach { (letter, words) ->
        println("$letter: ${words.joinToString(", ")}")
    }
//27.
    println(averageWordLength(list))

//29.
    val ages = listOf(22, 18, 30, 45, 17, null, 60)

    println(findFirstOlderThan(ages, 18))  //  22
    println(findFirstOlderThan(ages, 40))  //  45
    println(findFirstOlderThan(ages, 70))  // null (не найдено)
}

//    Реши задачи ниже в отдельных функциях.
//
//Задача 24. Характеристика числовой коллекции
//Напиши функцию, которая принимает коллекцию чисел и возвращает строку с характеристикой коллекции используя конструкцию when
//
//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”
fun characterize(numbers: Collection<Int>): String {
    return when {
        numbers.isEmpty() -> "Пусто"
        numbers.size < 5 -> "Короткая"
        numbers.firstOrNull() == 0 -> "Стартовая"
        numbers.sum() > 10000 -> "Массивная"
        numbers.average() == 10.0 -> "Сбалансированная"
        numbers.joinToString("").length == 20 -> "Клейкая"
        (numbers.maxOrNull() ?: 0) < -10 -> "Отрицательная"
        (numbers.minOrNull() ?: 0) > 1000 -> "Положительная"
        numbers.contains(3) && numbers.contains(14) -> "Пи***тая"
        else -> "Уникальная"
    }
}

//Вызвать метод с данными, подходящими под каждую из веток
//
//Задача 25. Анализ учебных оценок
//Напиши функцию, которая принимает список чисел и возвращает список чисел.
//Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3. Вызывай методы обработки и фильтрации последовательно один из другого, чтобы результат предыдущего метода являлся основой для следующего.
fun task24(): List<Int> {
    return listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
        .filter { it >= 60 }
        .sorted()
        .take(3)
}

//Задача 26. Создание каталога по первой букве
//Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - списком строк.
//Начальные значения: val list = listOf(
//"Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка"
//)
//
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy
fun createCatalog(items: List<String>): Map<Char, List<String>> {
    return items
        .map { it.lowercase() } // приводим все слова к нижнему регистру
        .groupBy { it.first() }  // группируем по первой букве
}


//Задание 27. Подсчёт средней длины слов в списке
//Напиши функцию, которая принимает список строк и возвращает строку.
//
//Начальные значения взять из предыдущей задачи.
//
//Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вернуть форматированный текст с двумя знаками после запятой, используя функцию format и подходящий шаблон.
fun averageWordLength(words: List<String>): String {
    // приводим все слова к нижнему регистру и считаем длину каждого
    val average = words
        .map { it.lowercase().length } // переводим слова в длины
        .average()                     // считаем среднее значение
// форматируем с двумя знаками после запятой
    return "Средняя длина слов: %.2f".format(average)
}

//Задание 28: Категоризация чисел
//Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - список чисел.
//
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
fun categorizeNumbers(numbers: List<Int>): Map<String, List<Int>> {
    return listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
        .distinct()                  // убираем дубликаты
        .sortedDescending()          // сортируем по убыванию
        .groupBy {                   // группируем по четности
            if (it % 2 == 0) "четные" else "нечетные"
        }
}

//Задание 29: Поиск первого подходящего элемента
//Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
//
//Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его, либо null если значения не нашлось.
fun findFirstOlderThan(ages: List<Int?>, limit: Int): Int? {
    return ages
        .filterNotNull()       // убираем null, чтобы не было ошибок
        .firstOrNull { it > limit } // находим первый элемент, который больше limit
}
