package ru.stimmax.lessons.lesson10.homeworks

fun main() {
// 1) Создайте пустой неизменяемый словарь, где ключи и значения - целые числа.
    val map1 = mapOf<Int, Int>()

// 2) Создайте словарь, инициализированный несколькими парами "ключ-значение",
// где ключи - float, а значения - double
    val map2: Map<Float, Double> = mapOf(1.1f to 2.0, 1.2f to 2.0, 1.3f to 2.0)

// 3) Создайте изменяемый словарь, где ключи - целые числа, а значения - строки.
    val map3: MutableMap<Int, String> = mutableMapOf(1 to "первый класс", 2 to "второй класс", 3 to "третий класс")

// 4) Имея изменяемый словарь, добавьте в него новые пары "ключ-значение".
    val map4: MutableMap<Int, String> = mutableMapOf(1 to "один", 2 to "два", 3 to "три")
    map4[4] = "четыре"
    map4[5] = "пять"

// 5) Используя словарь из предыдущего задания, извлеките значение, используя ключ.
// Попробуй получить значение с ключом, которого в словаре нет.
    val map5 = map4[5]
    println("$map5")

    val value5 = map4[6]
    println("$value5") // получаем значение по несуществующему ключу, null

// 6) Удалите определенный элемент из изменяемого словаря по его ключу.
    val map6: MutableMap<Int, String> = mutableMapOf(1 to "Kotlin", 2 to "Java", 3 to "Python")
    map6.remove(2) // Удаляем элемент с ключом 2

// 7) Создайте словарь (ключи Double, значения Int) и выведи в цикле результат деления
// ключа на значение. Не забудь обработать деление на 0 (в этом случае выведи слово “бесконечность”)
    val map7: Map<Double, Int> = mapOf(1.1 to 1, 1.2 to 2, 1.3 to 3)
    for ((k, v) in map7) {
        if (v == 0) {
            println("бесконечность")
        } else
            println(k / v)
    }

// 8) Измените значение для существующего ключа в изменяемом словаре.
    map6[15] = "Java 15"
    println("$map6")

// 9) Создайте два словаря и объедините их в третьем изменяемом словаре через циклы.
    val map91: Map<Int, String> = mapOf(1 to "a", 2 to "b", 3 to "c", 4 to "t")
    val map92: Map<Int, String> = mapOf(1 to "v", 5 to "n", 6 to "p")
    val map93: MutableMap<Int, String> = mutableMapOf()
    for ((k, v) in map91) {
        map93[k] = v
    }
    for ((k, v) in map92) {
        map93[k] = v
    }
    println("$map93")

// 10) Создайте словарь, где ключами являются строки, а значениями - списки целых чисел.
// Добавьте несколько элементов в этот словарь.
    val map10: MutableMap<String, MutableList<Int>> = mutableMapOf()
    // Добавляем элементы
    map10["Чётные"] = mutableListOf(2, 4, 6, 8, 10)
    map10["Нечётные"] = mutableListOf(1, 3, 5, 7, 9)
    map10["Простые"] = mutableListOf(2, 3, 5, 7, 11)
    println("$map10")

// 11) Создай словарь, в котором ключи - это целые числа, а значения - изменяемые множества строк.
// Добавь данные в словарь. Получи значение по ключу (это должно быть множество строк)
// и добавь в это множество ещё строку. Распечатай полученное множество.
    val map11: MutableMap<Int, MutableSet<String>> = mutableMapOf()
    map11[1] = mutableSetOf("первый", "второй")
    map11[2] = mutableSetOf("третий", "четвертый")
    map11[3] = mutableSetOf("пятый", "шестой")

    val mySet = map11[3]
    mySet?.add("двадцатый")
    println("$mySet")

// 12) Создай словарь, где ключами будут пары чисел. Через перебор найди значение у
// которого пара будет содержать цифру 5 в качестве первого или второго значения.
    val map12: Map<Pair<Int, Int>, Int> = mapOf(
        Pair(1, 2) to 1,
        Pair(5, 3) to 2,
        Pair(4, 5) to 3,
        Pair(6, 7) to 4,
        Pair(5, 5) to 5
    )
    for ((pair, value) in map12) {
        if (pair.first == 5 || pair.second == 5) {
            println("key $pair -> value $value")
        }
    }


//Задачи на подбор оптимального типа для словаря
// 1) Словарь библиотека: Ключи - автор книги, значения - список книг
    val library: MutableMap<String, List<String>> = mutableMapOf(
        "Лев Толстой" to listOf("Война и мир", "Анна Каренина")
    )

// 2) Справочник растений: Ключи - типы растений (например, "Цветы", "Деревья"),
// значения - списки названий растений
    val plants: Map<String, List<String>> = mapOf(
        "Цветы" to listOf("Роза", "Тюльпан", "Лилия"),
        "Деревья" to listOf("Берёза", "Дуб", "Сосна"),
        "Кустарники" to listOf("Смородина", "Малина", "Шиповник")
    )

// 3) Четвертьфинала: Ключи - названия спортивных команд, значения - списки
// игроков каждой команды
    val quarterFinal: Map<String, MutableList<String>> = mapOf(
        "Спартак" to mutableListOf("Иванов", "Петров", "Сидоров"),
        "Зенит" to mutableListOf("Смирнов", "Кузнецов", "Попов"),
        "ЦСКА" to mutableListOf("Васильев", "Фёдоров", "Дмитриев"),
        "Локомотив" to mutableListOf("Алексеев", "Григорьев", "Никитин")
    )

// 4) Курс лечения: Ключи - даты, значения - список препаратов принимаемых в дату
    val treatmentCourse: Map<String, List<String>> = mapOf(
        "2025-10-11" to listOf("Парацетамол", "Аскорбинка"),
        "2025-10-12" to listOf("Амоксициллин", "Мезим")
    )

// 5) Словарь путешественника: Ключи - страны, значения -
// словари из городов со списком интересных мест.
    val travelGuide: MutableMap<String, MutableMap<String, List<String>>> = mutableMapOf(
        "Италия" to mutableMapOf(
            "Рим" to listOf("Колизей", "Фонтан Треви", "Пантеон"),
            "Венеция" to listOf("Гранд-канал", "Площадь Сан-Марко")
        ),
        "Франция" to mutableMapOf(
            "Париж" to listOf("Эйфелева башня", "Лувр", "Собор Парижской Богоматери"),
            "Ницца" to listOf("Английская набережная", "Старый город")
        )
    )
}

